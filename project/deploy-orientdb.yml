---
# 1. Gather loadavg on all nodes
- name: Gather load metrics
  hosts: nodes
  gather_facts: false
  tasks:
    - name: Read 1-minute load average
      shell: cut -d ' ' -f1 /proc/loadavg
      register: load_txt

    - name: Set load fact
      set_fact:
        load: "{{ load_txt.stdout | float }}"

# 2. Determine router, app and client on the controller
- name: Determine router, app and client
  hosts: controller
  gather_facts: false
  vars:
    nodes: "{{ groups['nodes'] }}"
  tasks:
    - name: Build host→load map
      set_fact:
        loads: >-
          {{
            dict(
              nodes
              | map('extract', hostvars, 'load')
              | zip(nodes)
              | map('reverse')
            )
          }}

    - name: Select router (highest load)
      set_fact:
        router: "{{ (loads | dict2items | sort(attribute='value', reverse=true))[0].key }}"

    - name: Select app (lowest load)
      set_fact:
        app: "{{ (loads | dict2items | sort(attribute='value'))[0].key }}"

    - name: Select client (remaining node)
      set_fact:
        client: "{{ (nodes | difference([router, app]))[0] }}"

    - name: Add hosts to groups
      add_host:
        name: "{{ item.node }}"
        groups: "{{ item.group }}"
      loop:
        - { node: "{{ router }}", group: router }
        - { node: "{{ app    }}", group: app    }
        - { node: "{{ client }}", group: client }

# 3. Configure the router (enable IPv4 forwarding + NAT)
- name: Configure router node
  hosts: router
  become: true
  tasks:
    - name: Enable IPv4 forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        sysctl_set: yes

    - name: Configure NAT masquerading
      iptables:
        table: nat
        chain: POSTROUTING
        out_interface: eth0
        jump: MASQUERADE
        state: present

    - name: Save iptables rules
      copy:
        content: "{{ lookup('pipe','iptables-save') }}"
        dest: /etc/iptables.rules

# 4. Set default gateway on app and client via router
- name: Set default route via router
  hosts: app:client
  become: true
  vars:
    gw: "{{ hostvars[groups['router'][0]]['ansible_host'] }}"
  tasks:
    - name: Configure gateway on Debian-like
      when: ansible_os_family == 'Debian'
      lineinfile:
        path: /etc/network/interfaces
        regexp: '^\\s*gateway'
        line: "    gateway {{ gw }}"
        create: yes
      notify: Restart networking

    - name: Configure gateway on RedHat-like
      when: ansible_os_family == 'RedHat'
      lineinfile:
        path: /etc/sysconfig/network-scripts/ifcfg-eth0
        regexp: '^GATEWAY='
        line: "GATEWAY={{ gw }}"
      notify: Restart network

  handlers:
    - name: Restart networking
      service:
        name: networking
        state: restarted

    - name: Restart network
      service:
        name: network
        state: restarted

# 5. Deploy OrientDB on app (requires Java pre-installed)
- name: Deploy OrientDB on app
  hosts: app
  become: true
  vars:
    orient_version: 3.2.39
    orient_url: "https://repo1.maven.org/maven2/com/orientechnologies/orientdb-community/{{ orient_version }}/orientdb-community-{{ orient_version }}.tar.gz"
    install_dir: /opt/orientdb
  tasks:
    - name: Check Java is installed
      command: java -version
      register: java_check
      ignore_errors: true

    - name: Fail if Java is missing
      assert:
        that: java_check.rc == 0
        fail_msg: >
          Java is not installed on this host!
          Please install Java (e.g. OpenJDK 17) before running.

    - name: Ensure tar is available
      package:
        name: tar
        state: present
    - name: show first lines
      shell: head -n5 /tmp/orientdb.tgz
      register: head_out
      changed_when: false

    - debug: var=head_out.stdout_lines

    - name: Download OrientDB {{ orient_version }}
      get_url:
        url: "{{ orient_url }}"
        dest: /tmp/orientdb.tgz
        mode: '0644'

    - name: Unpack OrientDB archive
      unarchive:
        src: /tmp/orientdb.tgz
        dest: /opt
        remote_src: yes

    - name: Symlink to {{ install_dir }}
      file:
        src: "/opt/orientdb-community-{{ orient_version }}"
        dest: "{{ install_dir }}"
        state: link

    - name: Create systemd unit for OrientDB
      copy:
        dest: /etc/systemd/system/orientdb.service
        content: |
          [Unit]
          Description=OrientDB Server
          After=network.target

          [Service]
          Type=forking
          ExecStart={{ install_dir }}/bin/server.sh
          User=root
          Group=root
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target

    - name: Enable & start OrientDB
      systemd:
        name: orientdb
        enabled: yes
        state: started

# 6. Restrict access to port 2480 on app to client only
- name: Restrict OrientDB access on app
  hosts: app
  become: true
  vars:
    client_ip: "{{ hostvars[groups['client'][0]]['ansible_host'] }}"
  tasks:
    - name: Flush INPUT rules
      iptables:
        chain: INPUT
        table: filter
        flush: yes

    - name: Allow loopback
      iptables:
        chain: INPUT
        in_interface: lo
        jump: ACCEPT

    - name: Allow TCP/2480 from client only
      iptables:
        chain: INPUT
        protocol: tcp
        destination_port: 2480
        source: "{{ client_ip }}"
        jump: ACCEPT

    - name: Drop all other INPUT
      iptables:
        chain: INPUT
        jump: DROP

# 7. Configure client and test OrientDB access
- name: Configure client and test OrientDB
  hosts: client
  become: true
  vars:
    app_ip: "{{ hostvars[groups['app'][0]]['ansible_host'] }}"
  tasks:
    - name: Add orientdb.local → app IP
      lineinfile:
        path: /etc/hosts
        line: "{{ app_ip }} orientdb.local"
        create: yes

    - name: Test HTTP access to OrientDB
      uri:
        url: http://orientdb.local:2480
        method: GET
      register: result

    - debug:
        msg: "OrientDB HTTP status: {{ result.status }}"
